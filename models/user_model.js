/**
 * Created by qufan on 2015/7/9 0009.
 */
var Sequelize = require('sequelize');
var sequelize = require('./../lib/mysqlHelper');
var db = sequelize.db;
var orm_user = db.define('user',
    {
        uid:{
            type:Sequelize.INTEGER,
            primaryKey:true,
            autoIncrement:true
        },
        nickname:{type:Sequelize.STRING},
        gender:{type:Sequelize.INTEGER},
        avatar:{type:Sequelize.STRING},
        email:{type:Sequelize.STRING},
        password:{type:Sequelize.STRING},
        status:{type:Sequelize.INTEGER},
        loginIP:{type:Sequelize.STRING},
        pushID:{type:Sequelize.STRING},
        deviceID:{type:Sequelize.STRING},
        channel:{type:Sequelize.INTEGER},
        versionNum:{type:Sequelize.INTEGER},
        version:{type:Sequelize.STRING},
        platform:{type:Sequelize.STRING},
        lastLogin:{type:Sequelize.INTEGER},
        token:{type:Sequelize.STRING},
        expiresIn:{type:Sequelize.INTEGER},
        ctime:{type:Sequelize.INTEGER}//,
        //registrationID:{type:Sequelize.STRING}
    },
    {
        tableName:'user'
    }
);

/**
 *
 * findALl:{
 * has result:
 * [ { dataValues:
     { uid: 1,
       nickname: 'fasa',
       gender: 1,
       avatar: 'http://7xl1fl.com5.z0.glb.clouddn.com/1231',
       email: 'allen58581@163.com',
       password: '585822',
       status: 0,
       loginIP: null,
       pushID: null,
       deviceID: null,
       channel: null,
       versionNum: null,
       version: null,
       platform: null,
       lastLogin: null,
       token: '3e41b827b466b8c9cb117ab386c5240f',
       expiresIn: 1441783776,
       ctime: null,
       registrationID: null },
    _previousDataValues:
     { uid: 1,
       nickname: 'fasa',
       gender: 1,
       avatar: 'http://7xl1fl.com5.z0.glb.clouddn.com/1231',
       email: 'allen58581@163.com',
       password: '585822',
       status: 0,
       loginIP: null,
       pushID: null,
       deviceID: null,
       channel: null,
       versionNum: null,
       version: null,
       platform: null,
       lastLogin: null,
       token: '3e41b827b466b8c9cb117ab386c5240f',
       expiresIn: 1441783776,
       ctime: null,
       registrationID: null },
    _changed: {},
    __options:
     { timestamps: false,
       instanceMethods: {},
       classMethods: {},
       validate: {},
       freezeTableName: true,
       underscored: false,
       underscoredAll: false,
       paranoid: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: null,
       scopes: null,
       hooks: {},
       indexes: [],
       name: [Object],
       tableName: 'user',
       omitNull: false,
       sequelize: [Object],
       uniqueKeys: {},
       hasPrimaryKeys: true },
    options: { isNewRecord: false, raw: true, attributes: [Object] },
    hasPrimaryKeys: true,
    __eagerlyLoadedAssociations: [],
    isNewRecord: false },
  { dataValues:
     { uid: 2,
       nickname: '',
       gender: 0,
       avatar: null,
       email: '1231',
       password: 'dsadsada',
       status: 0,
       loginIP: null,
       pushID: null,
       deviceID: null,
       channel: null,
       versionNum: null,
       version: null,
       platform: null,
       lastLogin: null,
       token: null,
       expiresIn: null,
       ctime: null,
       registrationID: null },
    _previousDataValues:
     { uid: 2,
       nickname: '',
       gender: 0,
       avatar: null,
       email: '1231',
       password: 'dsadsada',
       status: 0,
       loginIP: null,
       pushID: null,
       deviceID: null,
       channel: null,
       versionNum: null,
       version: null,
       platform: null,
       lastLogin: null,
       token: null,
       expiresIn: null,
       ctime: null,
       registrationID: null },
    _changed: {},
    __options:
     { timestamps: false,
       instanceMethods: {},
       classMethods: {},
       validate: {},
       freezeTableName: true,
       underscored: false,
       underscoredAll: false,
       paranoid: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: null,
       scopes: null,
       hooks: {},
       indexes: [],
       name: [Object],
       tableName: 'user',
       omitNull: false,
       sequelize: [Object],
       uniqueKeys: {},
       hasPrimaryKeys: true },
    options: { isNewRecord: false, raw: true, attributes: [Object] },
    hasPrimaryKeys: true,
    __eagerlyLoadedAssociations: [],
    isNewRecord: false } ]


    nor result:
    []


    findOne:
    has result:
    { dataValues:
   { uid: 1,
     nickname: 'fasa',
     gender: 1,
     avatar: 'http://7xl1fl.com5.z0.glb.clouddn.com/1231',
     email: 'allen58581@163.com',
     password: '585822',
     status: 0,
     loginIP: null,
     pushID: null,
     deviceID: null,
     channel: null,
     versionNum: null,
     version: null,
     platform: null,
     lastLogin: null,
     token: '3e41b827b466b8c9cb117ab386c5240f',
     expiresIn: 1441783776,
     ctime: null,
     registrationID: null },
  _previousDataValues:
   { uid: 1,
     nickname: 'fasa',
     gender: 1,
     avatar: 'http://7xl1fl.com5.z0.glb.clouddn.com/1231',
     email: 'allen58581@163.com',
     password: '585822',
     status: 0,
     loginIP: null,
     pushID: null,
     deviceID: null,
     channel: null,
     versionNum: null,
     version: null,
     platform: null,
     lastLogin: null,
     token: '3e41b827b466b8c9cb117ab386c5240f',
     expiresIn: 1441783776,
     ctime: null,
     registrationID: null },
  _changed: {},
  __options:
   { timestamps: false,
     instanceMethods: {},
     classMethods: {},
     validate: {},
     freezeTableName: true,
     underscored: false,
     underscoredAll: false,
     paranoid: false,
     whereCollection: { uid: 1 },
     schema: null,
     schemaDelimiter: '',
     defaultScope: null,
     scopes: null,
     hooks: {},
     indexes: [],
     name: { plural: 'users', singular: 'user' },
     tableName: 'user',
     omitNull: false,
     sequelize:
      { options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        test: [Object],
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  options:
   { isNewRecord: false,
     raw: true,
     attributes:
      [ 'uid',
        'nickname',
        'gender',
        'avatar',
        'email',
        'password',
        'status',
        'loginIP',
        'pushID',
        'deviceID',
        'channel',
        'versionNum',
        'version',
        'platform',
        'lastLogin',
        'token',
        'expiresIn',
        'ctime',
        'registrationID' ] },
  hasPrimaryKeys: true,
  __eagerlyLoadedAssociations: [],
  isNewRecord: false }

  no result: null
 * }
 *
 *
 * update
 *
 * 结果是
 * [1,[...]]
 * 第一个代表更新的记录数，第二个可以返回结果
 *
 */

module.exports = orm_user;